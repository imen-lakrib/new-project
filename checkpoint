const express = require('express');
const { MongoClient, ObjectId } = require('mongodb');

const app = express();
const port = 3000;

const mongoUrl = 'mongodb://localhost:27017';
const dbName = 'contact';

app.use(express.json());

// Helper function to establish a database connection
const connectToDatabase = async () => {
  try {
    const client = new MongoClient(mongoUrl, { useUnifiedTopology: true });
    await client.connect();
    return client.db(dbName);
  } catch (error) {
    console.error('Failed to connect to the database', error);
    throw error;
  }
};

// Retrieve all contacts
app.get('/contacts', async (req, res) => {
  try {
    const db = await connectToDatabase();
    const contacts = await db.collection('contactlist').find().toArray();
    res.json(contacts);
  } catch (error) {
    console.error('Error retrieving contacts', error);
    res.status(500).json({ error: 'Failed to retrieve contacts' });
  }
});

// Retrieve a contact by ID
app.get('/contacts/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const db = await connectToDatabase();
    const contact = await db.collection('contactlist').findOne({ _id: ObjectId(id) });
    if (!contact) {
      return res.status(404).json({ error: 'Contact not found' });
    }
    res.json(contact);
  } catch (error) {
    console.error('Error retrieving contact', error);
    res.status(500).json({ error: 'Failed to retrieve contact' });
  }
});

// Retrieve contacts with age > 18
app.get('/contacts/age-greater-than-18', async (req, res) => {
  try {
    const db = await connectToDatabase();
    const contacts = await db.collection('contactlist').find({ age: { $gt: 18 } }).toArray();
    res.json(contacts);
  } catch (error) {
    console.error('Error retrieving contacts', error);
    res.status(500).json({ error: 'Failed to retrieve contacts' });
  }
});

// Retrieve contacts with age > 18 and name containing "ah"
app.get('/contacts/age-greater-than-18/name-contains-ah', async (req, res) => {
  try {
    const db = await connectToDatabase();
    const contacts = await db
      .collection('contactlist')
      .find({ age: { $gt: 18 }, first_name: /ah/ })
      .toArray();
    res.json(contacts);
  } catch (error) {
    console.error('Error retrieving contacts', error);
    res.status(500).json({ error: 'Failed to retrieve contacts' });
  }
});

// Update a contact's first name
app.patch('/contacts/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { first_name } = req.body;
    const db = await connectToDatabase();
    const result = await db
      .collection('contactlist')
      .updateOne({ _id: ObjectId(id) }, { $set: { first_name } });
    if (result.matchedCount === 0) {
      return res.status(404).json({ error: 'Contact not found' });
    }
    res.json({ message: 'Contact updated successfully' });
  } catch (error) {
    console.error('Error updating contact', error);
    res.status(500).json({ error: 'Failed to update contact' });
  }
});

// Delete contacts with age < 5
app.delete('/contacts/age-less-than-5', async (req, res) => {
  try {
    const db = await connectToDatabase();
    const result = await db.collection('contactlist').deleteMany({ age: { $lt: 5 } });
    res.json({ message: `${result.deletedCount} contacts deleted successfully` });
  } catch (error) {
    console.error('Error deleting contacts', error);
    res.status(500).json({ error: 'Failed to delete contacts' });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
